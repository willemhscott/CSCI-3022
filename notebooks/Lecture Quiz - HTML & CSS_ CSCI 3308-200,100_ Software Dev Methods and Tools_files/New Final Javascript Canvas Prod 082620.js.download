// Google Tag Manager Code
(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-MJ6HRCH');

var googleTagManager = '<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-MJ6HRCH" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>';
$('body').prepend(googleTagManager);

////////////////////////////////////////////////////
// DESIGN TOOLS CONFIG                            //
////////////////////////////////////////////////////
// Copyright (C) 2017  Utah State University
var DT_variables = {
        iframeID: '',
        // Path to the hosted USU Design Tools
        path: 'https://designtools.ciditools.com/',
        templateCourse: '20467',
        // OPTIONAL: Button will be hidden from view until launched using shortcut keys
        hideButton: true,
    	 // OPTIONAL: Limit by course format
	     limitByFormat: false, // Change to true to limit by format
	     // adjust the formats as needed. Format must be set for the course and in this array for tools to load
	     formatArray: [
            'online',
            'on-campus',
            'blended'
        ],
        // OPTIONAL: Limit tools loading by users role
        limitByRole: false, // set to true to limit to roles in the roleArray
        // adjust roles as needed
        roleArray: [
            'student',
            'teacher',
            'admin'
        ],
        // OPTIONAL: Limit tools to an array of Canvas user IDs
        limitByUser: false, // Change to true to limit by user
        // add users to array (Canvas user ID not SIS user ID)
        userArray: [
            '1234',
            '987654'
        ]
};

// Run the necessary code when a page loads
$(document).ready(function () {
    'use strict';
    // This runs code that looks at each page and determines what controls to create
    $.getScript(DT_variables.path + 'js/master_controls.js', function () {
        console.log('master_controls.js loaded');
    });
});
////////////////////////////////////////////////////
// END DESIGN TOOLS CONFIG                        //
////////////////////////////////////////////////////

// Custom Javascript used by our team.  Note that this snippet is concatenated
// with other custom JS and uploaded to Canvas by the ATAP team.


// Show course end date to students in self-paced courses (MA-TL, BSO).
(async function() {


function checkIfBso(canvasCourseTitle) {

    // This is a big hack.  The "right" thing to do would be to make an API
    // call to get course info, parse the sis_course_id for the session code,
    // and check that.  However that would mean that every single Canvas page
    // view by a student, on any course, would fire off an extra API call,
    // which could slow down the user experience as well as potentially impact
    // our Canvas API quota.

    // Example title: "SOCY 4014-640: Criminology | Online-Flexible"
    const dashX = canvasCourseTitle.indexOf('-');
    const colonX = canvasCourseTitle.indexOf(':');
    var sectionCode = '';
    if (dashX > 0 && colonX > dashX) {
        sectionCode = canvasCourseTitle.substring(dashX + 1, colonX);
    }

    // There are a handful of non-BSO courses with section codes that start
    // with 64, but they currently all end in "R".
    return sectionCode.startsWith('64') && !sectionCode.endsWith('R');
}


function addMessageToDom(isBso, enrollDate, expireDate) {
    let message = null;
    if (isBso) {
        message = `Your CE Flexible Online Course enrollment began on ${enrollDate.toDateString()}.  `
            + `You must complete all coursework by ${expireDate.toDateString()}.`;
    } else {
        message = `Your personalized self-paced class dates: ${enrollDate.toDateString()} - ${expireDate.toDateString()}.  `
            + 'Students may complete the course in advance of the end date.';
    }

    const node = document.createElement('h3');
    const textNode = document.createTextNode(message);
    node.appendChild(textNode);
    document.getElementById('main').prepend(node);
}


const MA_TL_COURSE_PREFIX = 'EDUA';

// Only apply to pages associated with a course.
if ('COURSE_TITLE' in ENV) {

    // Only apply to MA-TL self-paced and BSO courses.  EDUA is a unique course
    // prefix for the MA-TL courses, and all BSO section numbers begin with "64".

    const isMaTl = ENV.COURSE_TITLE.search(MA_TL_COURSE_PREFIX) === 0;
    const isBso = checkIfBso(ENV.COURSE_TITLE);

    // TODO (callaway): un-comment this out after testing.  Because of the way
    // the courses were cloned from sandbox courses, there is no sis_course_id
    // associated with these courses in test.  (Also, the synchronous MA-TL
    // courses don't launch until Spring 2021.)
/*
    if (isMaTl) {
        const url = `${window.location.origin}/api/v1/courses/${ENV.COURSE_ID}`;
        const result = await fetch(url, {headers: {'Accept': 'application/json'}});
        const data = await result.json();

        const courseSourcedId = data.sis_course_id;
        const fields = courseSourcedId.split('-');

        const isMaTlSelfPaced = fields[3] === 'OEE';
    }
*/
    const isMaTlSelfPaced = isMaTl;

    // Only show to students, not TAs or instructors.
    if ((isMaTlSelfPaced || isBso) && ENV.current_user_roles.find(el => el === 'student')) {
        const url = `${window.location.origin}/api/v1/courses/${ENV.COURSE_ID}/enrollments?user_id=${ENV.current_user.id}`;
        fetch(url, {headers: {'Accept': 'application/json'}})
            .then(response => response.json())
            .then(data => {

                const enrollDate = new Date(data[0].created_at);
                var expireDate = new Date(enrollDate.getTime());
                expireDate = new Date(expireDate.setMonth(expireDate.getMonth() + 6));
                addMessageToDom(isBso, enrollDate, expireDate);
            });
    }
}

})();
